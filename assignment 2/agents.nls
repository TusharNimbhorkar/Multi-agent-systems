buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  ;variables
  ;bus_stops
  counter 
  path
  desired-stop
  current-route
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  set counter 0
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  set path [3 20 12 22 0 22 12 20 3 16 5 4 10 17 7 1 11 1 7 13 22 12 15 18 15 0 14 23 13 22 12 20 9 8 2 8 6 8 9 20 12 15 0 22 13 23 19 23 13 22 12 20 9 20 21 20]
  ;set path [20 12 15 0 22 12 22 13 23 19 1 7 13 22 0 15 18 15 0 22 21 20 3 4 10 17 11 7 1 23 15 0 22 13 7 1 23 13 10 4 3 20 9 20 21 10 13 22 21 20 9 8 2 8 6 8 9 3 16 5 10 21 20 9 8 6 8 2 8 9 20 12 22 13 23 14 0 22 12]
  ;set desired-loc 0
  set current-route []
  add-bus 3

end

to search_stations[current destination original agenda];This recusrsive method, original will never change
 
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  
  let tmp item counter path
  
  ifelse current_stop = tmp
  [ 
    set counter ( counter + 1 ) mod 56
    set next_stop item counter path  
    ;show (word "current1 " current_stop " next " next_stop " prev " previous_stop)
    foreach bus_passengers [
           let id item 0 ?
           let p_station item 1 ?  
           if current_stop = p_station [
             drop-off-passenger id
           ]
    ]
    let passenger_list get-passengers-at-stop current_stop
    foreach passenger_list[
           let id item 0 ?
           let p_station item 1 ?  
           pick-up-passenger id
    ] 
    ;show (word "bus stop " current_stop)
    ;show (word "passengerslist " bus_passengers )
  ]
  [
    travel-to tmp
    ;show (word "current2 " current_stop " next " next_stop " prev " previous_stop)
  ] 
  
  if (ticks mod 100) = 0 and count buses < 3
  [add-bus 3
  ; show( word "hello " ticks )
  ]
  
  ;let cs current_stop  
   
  ;if get-distance cs tmp  = 0 [ 
  ;set counter counter + 1 ]
  ;foreach list(buses)[
    
  ;]
  ;let bus_one first buses
  ;ask buses [
   
   ;drop passengers
   ;loop;Check capacity
   
      ;pick up passengers
   ;
   ;move 
  ;]
 
  
  
  
end